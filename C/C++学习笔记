日期：2020.11.25
#C++初识
##1.1第一个C++程序
编写一个C++程序总共分为4个步骤
创建项目
创建文件
编写代码
运行程序
###1.1.1创建项目
点击创建新项目
选择visualC++/空项目/写名称/选位置/确定即可
###1.1.2创建文件
选择源文件/右击添加新建项/给文件起名/点击添加
###1.1.3编写代码-示例HelloWorld代码

    #include<iostream>
    using namespace std;
    int main()
    {
	    cout <<"hello world"<< endl; /*除了这一句，其他都是框架*/
	    system("pause");
	    return 0;
    }

##1.2注释
1.单行注释：//描述信息
通常放在一行代码的上方，或者一条语句的末尾，对该行代码说明
2，多行注释：/*描述信息*/
通常放在一段代码的上方，对该段代码做整体说明
##1.3变量
作用：给一段指定的内存空间起名，方便操作这段内存
语法：数据类型 变量名 = 变量初始值;

    #include<iostream>
    using namespace std;
    int main()
    {
        //变量的定义
        //语法：数据类型 变量名 = 初始值
        int a = 10;
        cout << "a = " << a << endl;
        system("pause");
        return 0;
    }

##1.4常量
作用：用于记录程序中不可更改的数据
C++定义常量两种方式
1.#define 宏常量

    #define 常量名 常量值
通常在文件上方定义，表示一个常量
2.const修饰的变量 

    const 数据类型 常量名 = 常量值
通常在变量定义前加关键字const，修饰该变量为常量，不可修改

    #include<iostream>
    using namespace std;
    //常量的定义方式
    //1、#define 宏常量
    //2、const修饰的变量
    //1、#define 宏常量
    #define Day 7
    int main()
    {
	    //Day = 14;//错误，Day是常量，一旦修改就会报错
	    cout << "一周总共有： " << Day << "天" << endl;
    	//2、const修饰的变量
	    const int month = 12;
	    //month = 24;//错误，const修饰的变量也成为常量
	    cout << "一年总共有：" << month << "个月份" << endl;
    	system("pause");
    	return 0;
    }

    日期：2020.11.26
#C++初识
##1.5关键字
作用：关键字是C++中预先保留的单词（标识符）
在定义变量或常量的时候，不要用关键字

    #include<iostream>
    using namespace std;
    int main()
    {
        //创建变量： 数据类型 变量名称 = 变量初始值
        //不要用关键字给变量或者常量起名称
        //int int = 10; 错误，第二个int是关键字，不可以作为变量的名称
        int a = 10;
        system("pause");
        return 0;
    }

##1.6标识符命名规则
作用：C++规定给标识符（变量、常量）命名时，有一套自己的规则
<ol>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须是字母或者下划线</li>
<li>标识符中字母区分大小写(AAA和aaa不是用一个变量)</li>
</ol>
#2数据类型
C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存
##2.1整型
作用：整型变量表示的是整数类型的数据
区别在于所占用的内存空间不同
|数据类型|占用空间|取值范围|
|-|-|-|
|short(短整型)|2字节|(-2^15 ~ 2^15-1)|
|int(整型)|4字节|(-2^31 ~ 2^31-1)|
|long(长整型)|Windows为4字节，Linux为4字节(32位)或者8字节(64位)|(-2^31 ~ 2^31-1)|
|long long(长长整型)|8字节|(-2^63 ~ 2^63-1)|

    #include<iostream>
    using namespace std;
    int main()
    {
        //整形
        //1、短整型（-32768 ~ 32767）
        short num1 = 10;
        //2、整型
        int num2 = 10;
        //3、长整型
        long num3 = 10; 
        //4、长长整型
        long long num4 = 10;
        cout << "num1 = " << num1 << endl;
        cout << "num2 = " << num2 << endl;
        cout << "num3 = " << num3 << endl;
        cout << "num4 = " << num4 << endl;
        system("pause");
        return 0;
    }
##2.2sizeof关键字
作用：利用sizeof关键字可以统计数据类型所占用的内存大小
语法:sizeof（数据类型 / 变量）

    #include<iostream>
    using namespace std;
    int main()
    {
        // 整型： short（2） 、int（4） 、long（4） 、long long（8）
        //可以利用sizeof求出数据类型占用内存大小
        //语法： sizeof(数据类型 / 变量)
        //整型大小比较
        //short < int <= long <= long long
        cout << "short占用的内存空间为：" << sizeof(short) << endl;
        cout << "int占用的内存空间为：" << sizeof(int) << endl;
        cout << "long占用的内存空间为：" << sizeof(long) << endl;
        cout << "long long占用的内存空间为：" << sizeof(long long) << endl;
        system("pause");
        return 0;
    }

##2.3实型(浮点型)
作用：用于表示小数
浮点类型变量分两种：
1.单精度float
2.双精度double
两者的**区别**在于表示的有效数字(所有数字都被统计，如3.14是三位有效数字)范围不同

|数据类型|占用空间|有效数字范围|
|-|-|-|
|float|4字节|7为有效数字|
|double|8字节|15~16位有效数字|

    #include<iostream>
    using namespace std;
    int main()
    {
       //1、单精度 float
       //2、双精度 double
       //默认情况下，输出一个小数，会显示出6位有效数字
       //float f1 = 3.14;(默认小数是双精度)
       float f1 = 3.1415926f;
       cout << "f1 = " << f1 << endl;
       double f2 = 3.1415926;
       cout << "f2 = " << f2 << endl;
       //统计float和double占用内存空间
       cout << "float占" << sizeof(float) << "字节" << endl;
       cout << "double占" << sizeof(double) << "字节" << endl;
       //科学计数法
       float f3 = 3e2; //3 * 10 ^ 2;
       cout << "f3 = " << f3 << endl;
       float f4 = 3e-2; //3 * 0.1 ^ 2;
       cout << "f4 = " << f4 << endl;
       system("pause");
       return 0;
    }

##2.4字符型
作用：字符型变量用于显示单个字符
语法：char ch = 'a';
<ol>
<li>在显示字符型变量时，用单引号将字符括起来，不要用双引号</li>
<li>单引号内只能有一个字符，不可以是字符串</li>
</ol>

<ul>
<li>C和C++中字符型变量只占用一个字节</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入存储单元</li>
</ul>

    #include<iostream>
    using namespace std;
    int main()
    {
        //1、字符型变量创建方式
        char ch = 'a';
        cout << ch << endl;
        //2、字符型变量所占用内存大小
        cout << "char字符型变量所占内存： " << sizeof(char) << endl;
        //3、字符像变量常见错误
        // char ch2 = "b"; //创建字符型变量时候，要用单引号
        // char ch3 = 'abcdef';//创建字符型变量时候，单引号内只能有一个字符
        //4、字符型变量对应的ASCII编码
        // a - 97
        // A - 65
        cout << (int)ch << endl;
        system("pause");
        return 0;
    }

##2.5转义字符
作用：用于表示一些不能显示出来的ASCII字符
现阶段我们常用的转义字符有：\n \\\ \t
|转义字符|含义|ASCII码值(十进制)|
|-|-|-|
|\a|警报|007|
|\b|退格(BS)，将当前位置移到前一列|008|
|\f|换页(FF)，将当前位置移到下页开头|012|
|**\n**|换行(LF)，将当前位置移到下一行开头|010|
|\r|回车(CR)，将当前位置移到本行开头|013|
|**\t**|水平制表(HT)(跳到下一个TAB位置)|009|
|\v|垂直制表(VT)|011|
|**\\\\**|代表一个反斜杠字符"\\"|092|
|\\'|代表一个单引号字符(撇号)字符|039|
|\\''|代表一个双引导字符|034|
|\\?|代表一个问号|063|
|\0|数字0|000|

    #include<iostream>
    using namespace std;
    int main()
    {
        //转义字符
        //换行符 \n
        cout << "hello world" << endl;
        cout << "Hello world\n";
        //反斜杠 \\
        cout << "\\" << endl;
        //水平制表 \t
    // \t一共占8个位置，前面用掉n个字符，还剩下(8-n)个空格
    //作用：整齐的表示输出

    cout << "aaa\tbbb\tccc\t" << endl;

    system("pause");

    return 0;
    }


##2.6字符串型
作用：表示一串字符
**两种风格**
**C风格字符串**：char 变量名[] = "字符串值"

    int main()
    {
        char str1[] = "hello world";
        cout << str1 << endl;
        system("pause");
        return 0;
    }

**C++风格字符串**：string 变量名 = "字符串值"
**注意：C++风格字符串，需要加入头文件#include\<string>**

    int main()
    {
        string str1 = "hello world";
        cout << str1 << endl;
        system("pause");
        return 0;
    }


##2.7布尔类型 bool
作用：布尔数据类型代表真或假的值
bool类型只有两个值：
<ul>
<li>true --- 真(本质是1)</li>
<li>false --- 假(本质是0)</li>
</ul>
bool类型占1个字节大小

    #include<iostream>
    using namespace std;
    int main()
    {
        //1、创建bool数据类型
        bool flag = true;//true代表真
        cout << flag << endl;//1
        flag = false;//false代表假
        cout << flag << endl;
        //本质上 1代表真 0代表假
        //2、查看bool类型所占内存空间
        cout << "sizeof of bool = " << sizeof(bool) << endl; //1
        system("pause");
        return 0;
    }

##2.8数据输入
作用：用于从键盘获取数据
关键字： cin >> 变量

    #include<iostream>
    #include<string>
    using namespace std;

    int main()
    {
        //1、整型输入
        int a = 0;
        cout << "请给整型变量a赋值：" << endl;
        cin >> a;
        cout << "a = " << a << endl;
        //2、浮点型
        float f = 3.14f;
        cout << "请给浮点型变量f赋值：" << endl;
        cin >> f;
        cout << "f = " << f << endl;
        //3、字符型
        char ch = 'a';
        cout << "请给字符型变量ch赋值：" << endl;
        cin >> ch;
        cout << "ch = " << ch << endl;
        //4、字符串型
        string str = "hello";
        cout << "请给字符串型变量str赋值：" << endl;
        cin >> str;
        cout << "str = " << str << endl;
        //5、bool类型
        bool flag = false;
        cout << "请给bool型变量flag赋值：" << endl;
        cin >> flag;//bool类型，只要是非0的值都代表真
        cout << "flag = " << flag << endl;
        system("pause");
        return 0;
    }

#3运算符
作用：用于执行代码的运算
|运算符类型|作用|
|-|-|
|算术运算符|用于处理四则运算|
|赋值运算符|用于将表达式的值赋给变量|
|比较运算符|用于表达式的比较，并返回一个真值或假值|
|逻辑运算符|用于根据表达式的值返回真值或假值|
##3.1算术运算符
作用：用于处理四则运算
|运算符|术语|示例|结果|
|-|-|-|-|
|+|正号|+3|3|
|-|负号|-3|-3|
|+|加|10+5|15|
|-|减|10-5|5|
|*|乘|10*5|50|
|/|除|10/5|2|
|%|取余(取模)|10%3|1|
|++|前置递增|a=2;b=++a;|a=3;b=3;|
|++|后置递增|a=2;b=a++;|a=3;b=2;|
|--|前置递减|a=2;b=--a;|a=1;b=1;|
|--|后置递减|a=2;b=a--;|a=1;b=2|

###3.1.1加减乘除

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //加减乘除
        int a1 = 10;
        int b1 = 3;
        cout << a1 + b1 << endl;
        cout << a1 - b1 << endl;
        cout << a1 * b1 << endl;
        cout << a1 / b1 << endl;//两个整数相除，结果依然是整数，将小数部分去除
        int a2 = 10;
        int b2 = 20;
        cout << a2 / b2 << endl;
        /*  
            错误！ 两个数相除，除数不可以为0
            int a3 = 10;
            int b3 = 0;
            cout << a3 / b3 << endl;
        */
        //两个小数可以相除，运算结果也可以是小数
        double d1 = 0.5;
        double d2 = 0.22;
        cout << d1 / d2 << endl;
        system("pause");
        return 0;
    }
    
###3.1.2取余(取模)
注意：只有整型变量可以进行取模运算

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //取模(取余)运算的本质就是求余数
        int a1 = 10;
        int b1 = 3;
        cout << a1 % b1 << endl;
        int a2 = 10;
        int b2 = 20;
        cout << a2 % b2 << endl;
        /*
           错误！两个数相除，除数不可以为0
           int a3 = 10;
           int b3 = 0;
           cout << a3 % b3 << endl;
        */
        /*
           错误！两个小数是不可以做取模运算的
           double d1 = 3.14;
           double d2 = 1.1;
           cout << d1 % d2 << endl;
        */
        system("pause");
        return 0;
    }

###3.1.3前置递增(递减)和后置递增(递减)

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //1、前置递增
        int a = 10;
        ++a;//让变量+1
        cout << "a = " << a << endl;

        //2、后置递增
        int b = 10;
        b++;
        cout << "b = " << b << endl;

        //3、前置和后置的区别

        //前置递增 先让变量+1 然后进行表达式运算
        int a2 = 10;
        int b2 = ++a2 * 10;
        cout << "a2 = " << a2 << endl;//a2 = 11;
        cout << "b2 = " << b2 << endl;//b2 = 110;

        //后置递增 先进行表达式运算 后让变量+1
        int a3 = 10;
        int b3 = a3++ * 10;
        cout << "a3 = " << a3 << endl;//a3 = 11;
        cout << "b3 = " << b3 << endl;//b3 = 100;
        system("pause");
        return 0;
    }

##3.2赋值运算符
作用：用于将表达式的值赋值给变量
|运算符|术语|示例|结果|
|-|-|-|-|
|=|赋值|a=2;b=3;|a=2;b=3;|
|+=|加等于|a=0;a+=2;|a=2;|
|-=|减等于|a=5;a-=3;|a=2;|
|*=|乘等于|a=2;a*=2;|a=4;|
|/=|除等于|a=4;a/=2;|a=2;|
|%=|模等于|a=3;a%=2|a=1;|

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //赋值运算符
        // =
        int a = 10;
        a = 100;
        cout << "a = " << a << endl;//a = 100;
        // +=
        a = 10;
        a += 2;//a = a + 2;
        cout << "a = " << a << endl;//a = 12;
        // -=
        a = 10;
        a -= 2;//a = a - 2;
        cout << "a = " << a << endl;//a = 8;
        // *=
        a = 10;
        a *= 2;//a = a * 2;
        cout << "a = " << a << endl;//a = 20;
        // /=
        a = 10;
        a /= 2;//a = a / 2;
        cout << "a = " << a << endl;//a = 5;
        // %=
        a = 10;
        a %= 2;//a = a % 2 ;
        cout << "a = " << a << endl;//a = 0;
        system("pause");
        return 0;
    }

##3.3 比较运算符
作用：用于表达式的比较，并返回一个真值或假值

|运算符|术语|示例|结果|
|-|-|-|-|
|==|相等于|4 == 3|0|
|！=|不等于|4 ！= 3|1|
|<|小于|4 < 3|0|
|>|大于|4 > 3|1|
|<=|小于等于|4 <= 3|0|
|>=|大于等于|4 >= 3|1|

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //比较运算符
        // ==
        int a = 10;
        int b = 20;
        cout << (a == b) << endl;//0
        // !=
        cout << (a != b) << endl;//1
        // <
        cout << (a < b) << endl;//1
        // >
        cout << (a > b) << endl;//0
        // <=
        cout << (a <= b) << endl;//1
        // >=
        cout << (a >= b) << endl;//0
        system("pause");
        return 0;
    }

##3.4逻辑运算符
作用：用于根据表达式的值返回真值或假值
|运算符|术语|示例|结果|
|-|-|-|-|
|!|非|！a|如果a为假，则！a为真；如果a为真，则！a为假。|
|&&|与|a && b|如果a和b都为真，则结果为真，否则为假。|
|\|\||或|a \|\| b|如果a和b有一个为真，则结果为真；二者都为假时，结果为假。|

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //逻辑运算符
        //1、逻辑非-在C++中，除了0都为真
        int a = 10;
        cout << !a << endl;//0
        cout << !!a << endl;//1
        //2、逻辑与
        int b = 10;
        cout << (a && b) << endl;//1
        a = 0;
        cout << (a && b) << endl;//0
        //3、逻辑或
        a = 10;
        b = 10;
        cout << (a || b) << endl;//1
        a = 0;
        b = 10;
        cout << (a || b) << endl;//1
        a = 0;
        b = 0;
        cout << (a || b) << endl;//0
        system("pause");
        return 0;
    }

    日期：2020.11.28
#4程序流程结构
C/C++支持最基本的三种程序运行结构：**顺序结构**、**选择结构**、**循环结构**
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>

##4.1顺序结构
###4.1.1 if语句
作用：执行满足条件的语句
if语句的三种格式
<ul>
<li>单行格式if语句</li>
<li>多行格式if语句</li>
<li>多条件的if语句</li>
</ul>
1.单行格式if语句：if(条件){条件满足执行的语句}

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //选择结构 单行if语句
        //用户输入分数，如果分数大于600，视为考上一本大学，在屏幕上输出
        //1、用户输入分数
        int score = 0;
        cout << "请输入一个分数：" << endl;
        cin >> score;
        //2、打印用户输入的分数
        cout << "您输入的分数为：" << score << endl;
        //3、判断分数是否大于600，如果大于，输出
        //注意事项，if条件后面不要加分号
        if (score > 600)
        {
            cout << "恭喜！" << endl;
        }
        system("pause");
        return 0;
    }

2.多行格式if语句：if(条件){条件满足执行的语句}else{条件不满足执行的语句}

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //选择结构 多行格式if语句
        //用户输入分数，如果分数大于600，视为考上一本大学，在屏幕上输出
        //1、用户输入分数
        int score = 0;
        cout << "请输入一个分数：" << endl;
        cin >> score;
        //2、打印用户输入的分数
        cout << "您输入的分数为：" << score << endl;
        //3、判断分数是否大于600，如果大于，输出
        if (score > 600)
        {
            cout << "恭喜！" << endl;
        }
        else
        {
            cout << "很遗憾！" << endl;
        }
        system("pause");
        return 0;
    }

3.多条件的if语句：if(条件1){条件1满足执行的语句}else if(条件2){条件2满足执行的语句}...else{都不满足执行的语句}

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //选择结构 多条件的if语句
        //用户输入分数，如果分数大于600，视为考上一本大学，在屏幕输出
        //如果分数大于500分，视为考上二本大学，在屏幕输出
        //如果分数大于400分，视为考上三本大学，在屏幕输出
        //如果分数大于300，视为考上大专，在屏幕上输出
        //1、用户输入分数
        int score = 0;
        cout << "请输入一个分数：" << endl;
        cin >> score;
        //2、打印用户输入的分数
        cout << "您输入的分数为：" << score << endl;
        //3、判断分数是否大于600，如果大于，输出
        //注意事项，if条件后面不要加分号
        if (score >= 600)
        {
            cout << "恭喜一本！" << endl;
        }
        else if(score >= 500)
        {
            cout << "恭喜二本！" << endl;
        }
        else if (score >= 400)
        {
            cout << "恭喜三本！" << endl;
        }
        else
        {
            cout << "恭喜大专！" << endl;
        }
        system("pause");
        return 0;
    }

###4.1.2嵌套if语句
在if语句中，可以嵌套使用if语句，达到更精确的条件判断
案例需求：
<ul>
<li>提示用户输入一个高考考试分数，根据分数作如下判断</li>
<li>分数如果大于600分视为考上了一本，大于500分考上二本，大于400分考上三本，其余视为未考上本科</li>
<li>在一本分数中，如果大于700分，考入北大；大于650分，考入清华；大于600分，考入人大</li>
</ul>

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //选择结构 多条件的if语句
        //用户输入分数，如果分数大于600，视为考上一本大学，在屏幕输出
        //如果分数大于500分，视为考上二本大学，在屏幕输出
        //如果分数大于400分，视为考上三本大学，在屏幕输出
        //如果分数大于300，视为考上大专，在屏幕上输出
        //1、用户输入分数
        int score = 0;
        cout << "请输入一个分数：" << endl;
        cin >> score;
        //2、打印用户输入的分数
        cout << "您输入的分数为：" << score << endl;
        //3、分数如果大于600分视为考上了一本，大于500分考上二本，大于400分考上三本，其余视为未考上本科
        //在一本分数中，如果大于700分，考入北大；大于650分，考入清华；大于600分，考入人大
        if (score >= 600)
        {
            cout << "恭喜考上一本!" << endl;
            if (score >= 700)
            {
                cout << "考上了北大！" << endl;
            }
            else if (score >= 650)
            {
                cout << "考上了清华！" << endl;
            }
            else
            {
                cout << "考上了人大！" << endl;
            }    
        }
        else if(score >= 500)
        {
            cout << "恭喜二本！" << endl;
        }
        else if (score >= 400)
        {
            cout << "恭喜三本！" << endl;
        }
        else
        {
            cout << "恭喜大专！" << endl;
        }
        system("pause");
        return 0;
    }

练习案例：三只小猪称体重
有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //练习 三只小猪称重

        //有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重
        //1、输入三只小猪的体重
        float A = 0;
        float B = 0;
        float C = 0;
        cout << "请分别输入三只小猪的体重：" << endl;
        cout << "A小猪的体重：" << endl;
        cin >> A;
        cout << "B小猪的体重：" << endl;
        cin >> B;
        cout << "C小猪的体重：" << endl;
        cin >> C;
        //2、判断
        if (A > B)
        {
            if (A > C)
            {
                cout << "A小猪最重！" << endl;
            }
            else
            {
                cout << "C小猪最重" << endl;
            }
        }
        else
        {
            if (B > C)
            {
                cout << "B小猪最重" << endl;
            }
            else
            {
                cout << "C小猪最重" << endl;
            }
        }
        system("pause");
        return 0;
    }
###4.1.3三目运算符
作用：通过三目运算符实现简单地判断
语法：表达式1 ? 表达式2 : 表达式3
解释：
如果表达式1的值为真，执行表达式2，并返回表达式2的结果；
如果表达式1的值为假，执行表达式3，并返回表达式3的结果；

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //三目运算符
        //创建三个变量 a,b,c
        //将a和b作比较，将变量大的值赋值给变量C
        int a = 10;
        int b = 20;
        int c = 0;
        c = (a > b ? a : b);
        cout << "C = " << c << endl;//C = 20;
        //在C++中三目运算符返回的是变量，可以继续赋值
        (a > b ? a : b) = 100;
        cout << "a = " << a << endl;//a = 10;
        cout << "b = " << b << endl;//b = 100;
    /*
        (a < b ? a : b) = 100;
        cout << "a = " << a << endl;//a = 100;
        cout << "b = " << b << endl;//b = 20;
    */
        system("pause");
        return 0;
    }
###4.1.4switch语句
作用：执行多条件分支语句
语法：

    switch(表达式)
    {
        case 结果1：执行语句;break;
        case 结果2：执行语句;break;
        ...
        default:执行语句;break;
    }

<ol>
<li>switch语句中表达式类型只能是整型或者字符型</li>
<li>case里如果没有break，那么程序会一直执行下去</li>
<li>与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</li>
</ol>

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //switch语句
        //break;退出当前分支
        //给一个电影打分
        //10 ~ 9 经典
        //8 ~ 7 非常好
        //6 ~ 5 一般
        //5以下 烂片
        //1、提示用户评分
        int score = 0;
        cout << "请输入评分:" << endl;
        cin >> score;
        //2、根据用户输入的分数来提示用户最后的结果
        switch (score)
        {
        case 10:
        case 9:
            cout << "这是个经典的电影！" << endl; break;
        case 8:
        case 7:
            cout << "这是个非常好的电影！" << endl; break;
        case 6:
        case 5:
            cout << "这是个一般的电影！" << endl; break;
        default :
            cout << "这是个烂片！" << endl; break;
        }
        //if 和 switch区别？
        //switch 缺点，判断时候只能是整型或者字符型，不可以是一个区间
        //switch 优点，结构清晰，执行效率高
        system("pause");
        return 0;
    }

##4.2循环结构
###4.2.1*while*循环语句
作用：满足循环条件，执行循环语句
语法：

    while(循环条件){循环语句}
解释：只要循环条件的结果为真，就执行循环语句

    #include<iostream>
    #include<string>
    using namespace std;
    int main()
    {
        //while循环
        //在屏幕中打印0~9这10个数字
        int num = 0;

        //while()中填入循环条件
        while (num < 10)
        {
            cout << num << endl;
            num++;
        }
        system("pause");
        return 0;
    }
while循环练习案例:**猜数字**
案例描述：系统随机生成一个1到100之间的数字,玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对,恭喜玩家胜利，并退出游戏。

    #include<iostream>
    #include<string>
    #include<ctime>//time系统时间头文件
    using namespace std;
    int main()
    {
        //添加随机数种子，作用利用当前系统时间生成随机数，防止每次随机数都一样
        srand((unsigned int)time(NULL));
        //1、系统生成随机数
        //rand()%100 //rand()%100表示生成 0 ~ 99之间的随机数
        //ctrl+shift+/ 快速注释
        int num = rand() % 100 + 1;//rand()%100表示生成(1+0) ~ (99+1)之间的随机数即1~100之间的随机数
        //cout << num << endl;
        //2、玩家进行猜测
        int val = 0;
        while (1)
        {
            cin >> val;
            //3、判断玩家的猜测
            //猜错 提示猜的结果 过大或过小 重新返回第2步
            if (val > num)
            {
                cout << "猜测过大" << endl;
            }
            else if (val < num)
            {
                cout << "猜测过小" << endl;
            }
            else
            {
                cout << "你猜对了" << endl;
                //猜对，退出游戏
                break;//break，可以利用该关键字来退出当前循环
            }
        }    
        //4、猜对 退出游戏
        //猜错 提示猜的结果 过大或过小 重新返回第2步
        system("pause");
        return 0;
    }

###4.2.2*do...while*循环语句
作用：满足循环条件，执行循环语句
语法：

    do{循环语句}while(循环条件);
注意：与while的区别在于do...while会先执行一次循环语句，再判断循环条件

    #include<iostream>
    #include<string>
    #include<ctime>//time系统时间头文件
    using namespace std;
    int main()
    {
        //do...while语句
        //在屏幕上输出0~9这10个数字
        
        int num = 0;
        do {
            cout << num << endl;
            num++;
        } while (num < 10);
        system("pause");
        return 0;
    }

练习案例：水仙花数
案例描述：水仙花数是指一个3位数，他的每个位上的数字的3次幂之和等于他本身
例如：1^3+5^3+3^3 = 153
请利用do...while语句，求出所有3位数中的水仙花数

    #include<iostream>
    #include<string>
    #include<ctime>//time系统时间头文件
    using namespace std;
    int main()
    {
        //水仙花数
        int num = 100;
        do {
            int a = 0;
            int b = 0;
            int c = 0;
            a = num % 10;//获取数字的个位
            b = num / 10 % 10;//获取数字的十位
            c = num / 100;//获取数字的百位
            if (num == (a*a*a+b*b*b+c*c*c))
            {
                cout << num << endl;
            }
            num++;
        } while (num < 1000);        
        system("pause");
        return 0;
    }

###4.2.3 *for*循环语句
作用：满足循环条件，执行循环语句
语法：for(起始表达式;条件表达式;末尾循环体){循环语句;}

    #include<iostream>
    #include<string>
    #include<ctime>//time系统时间头文件
    using namespace std;
    int main()
    {
        //for循环
        //打印数字0~9
        int i = 0;
        for (i = 0; i < 10; i++)
        {
            cout << i << endl;
        }
        system("pause");
        return 0;
    }

注意：for循环中的表达式，要用分号进行分隔
总结：while，do...while，for都是开发中常用的循环语句，for循环结构比较清晰，比较常用
练习案例：敲桌子
案例描述：从1开始到数字100，如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。

    #include<iostream>
    #include<string>
    #include<ctime>//time系统时间头文件
    using namespace std;
    int main()
    {
        //敲桌子案例
        //1、先输出1到100这些数字
        //2、从这100个数字中找到特殊数字，改为“敲桌子”
        
        int i = 0;
        for (i = 1; i <= 100; i++)
        {
            //如果是7的倍数、个位有7、或者十位有7，打印敲桌子
            if (i % 7 == 0 || i % 10 == 7 || i / 10 == 7)
            {
                cout << "敲桌子" << endl;
            }
            else
                cout << i << endl;
        }
        system("pause");
        return 0;
    }

###4.2.4嵌套循环
作用：在循环体中再嵌套一层循环，解决一些实际问题

    #include<iostream>
    #include<string>
    #include<ctime>//time系统时间头文件
    using namespace std;
    int main()
    {
        //利用嵌套循环实现星图
        //打印一行星图
        for (int i = 0; i < 10; i++)
        {
            for (int j = 0; j < 10; j++)
            {
                cout << "* ";
            }
            cout << endl;
        }
        system("pause");
        return 0;
    }

练习案例：乘法口诀表
案例描述：利用嵌套循环，实现九九乘法表

    #include<iostream>
    using namespace std;
    int main()
    {
        for (int i = 1; i <= 9; i++)
        {
            for (int j = 1; j <= i; j++)
            {
                cout << j << "*" << i << "=" << j * i<< " ";
            }
            cout << endl;
        }
        system("pause");
        return 0;
    }

##4.3跳转语句
###4.3.1break语句
作用：用于跳出**选择结构**或者**循环结构**
break使用的时机：
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>

    #include<iostream>
    using namespace std;
    int main()
    {
        //break的使用时机
        ////1、出现在switch语句中
        //cout << "请选择难度" << endl;
        //cout << "1、普通" << endl;
        //cout << "2、中等" << endl;
        //cout << "3、困难" << endl;
        //int select = 0; //创建选择结果的变量
        //cin >> select;
        //switch (select)
        //{
        //case 1:
        //      cout << "您选择的是普通难度" << endl; break;
        //  case 2:
        //      cout << "您选择的是中等难度" << endl; break;
        //case 3:
        //      cout << "您选择的是困难难度" << endl; break;
        //  default:
        //      break;
        //}
        //2、出现在循环语句中
        //for (int i = 0; i < 10; i++)
        //{
        //  //如果i等于5，退出循环，不再打印
        //  if (i == 5)
        //  {
        //      break;//退出循环
        //  }
        //  cout << i << endl;
        //}
        //3、出现在嵌套循环语句中
        for (int i = 0; i < 10; i++)
        {
            for (int j = 0; j < 10; j++)
            {
                if (j == 5)
                {
                    break;//退出内层循环
                }
                cout << " * ";
            }
            cout << endl;
        }
        system("pause");
        return 0;
    }

###4.3.2continue语句
作用：在**循环语句**中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环

    #include<iostream>
    using namespace std;
    int main()
    {
        //continue语句
        for (int i = 0; i <= 100; i++)
        {
            //如果是奇数输出，偶数不输出
            if (i % 2 == 0)
            {
                continue;//可以筛选条件，执行到此就不再向下执行，执行下一次循环
                //break会退出循环，而continue不会
            }
            cout << i << endl;
        }
        system("pause");
        return 0;
    }
注意：continue并没有使整个循环终止，而break会跳出循环

日期：2020.12.2
#5数组
##5.1概述
所谓数组，就是一个集合，里面存放了相同类型的数据元素
<ol>
<li>数组中的每个数据元素都是相同的数据类型</li>
<li>数组是由连续的内存位置组成的</li>
</ol>
##5.2一维数组
###5.2.1一维数组定义方式
一维数组定义的三种方式：
<ol>
<li>数据类型 数组名[数组长度];</li>
<li>数据类型 数组名[数组长度] = {值1，值2，……};</li>
<li>数据类型 数组名[] = {值1，值2，……};</li>
</ol>

    #include<iostream>
    using namespace std;
    int main()
    {
        //数组
        //数据类型 数组名[数组长度];
        //给数组中的元素进行赋值
        //数组元素的下标是从0开始索引的
        int arr[5];
        arr[0] = 10;
        arr[1] = 20;
        arr[2] = 30;
        arr[3] = 40;
        arr[4] = 50;
        //访问数组元素
        //cout << arr[0] << endl;
        //cout << arr[1] << endl;
        //cout << arr[2] << endl;
        //cout << arr[3] << endl;
        //cout << arr[4] << endl;
        //数据类型 数组名[数组长度] = {值1，值2，……};
        //如果在初始化数据时候，没有全部填写完，会用0来填补剩余数据
        //int arr2[5] = { 10,20,30};
        //for (int i = 0; i < 5; i++)
        //{
        //  cout << arr2[i] << endl;
        //}
        //数据类型 数组名[] = {值1，值2，……};
        int arr3[] = {90,80,70,60,50,40,30,20,10};
        for (int i = 0; i < 9; i++)
        {
            cout << arr3[i] << endl;
        }
        system("pause");
        return 0;
    }

<ol>
<li>数组名的命名规范与变量名命名规范一致，不要和变量重名</li>
<li>数组中下标是从0开始索引</li>
</ol>

###5.2.2一维数组数组名
一维数组名称的用途：
<ol>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>

    #include<iostream>
    using namespace std;
    int main()
    {
        //数组名用途
        //1、可以通过数组名统计整个数组占用内存大小
        int arr[10] = {1,2,3,4,5,6,7,8,9,10};
        cout << "整个数组占用内存空间为：" << sizeof(arr) << endl;
        cout << "该数组中每个元素占内存空间为：" << sizeof(arr[0]) << endl;
        cout << "数组中元素的个数为：" << sizeof(arr) / sizeof(arr[0]) << endl;
        //2、可以通过数组名称查看数组首地址
        cout << "数组首地址为：" << (int)arr << endl;
        cout << "数组中第一个元素的地址为：" << (int)&arr[0] << endl;
        cout << "数组中第二个元素的地址为：" << (int)&arr[1] << endl;
        //数组名是常量，不可以进行赋值操作
        //arr = 100;错误！！！
        system("pause");
        return 0;
    }

案例练习1：五只小猪称体重
案例描述：
在一个数组中记录了五只小猪的体重，如：int arr[5]={300,350,200,400,250};
找出并打印出最重的小猪体重。

    #include<iostream>
    using namespace std;
    int main()
    {
        //五只小猪称体重
        int arr[5] = {300,350,200,400,250};
        int max = 0;
        for (int i = 0; i < 5; i++)
        {
            if (arr[i] >= max)
            {
                max = arr[i];
            }
            else
            {
                continue;//结束本次循环，进入下一次循环
            }
        }
        cout <<"最重的小猪体重为：" << max << endl;
        system("pause");
        return 0;
    }

案例练习2：数组元素逆置
案例描述：请声明一个5个元素的数组，并且将元素逆置
(如原数组元素为：1，3，2，5，4；逆置后输出结果为：4,5,2,3,1;)

    #include<iostream>
    using namespace std;
    int main()
    {
        //数组元素逆置
        //1、创建数组
        int arr[5];
        cout << "请输入五个值来构造一个数组：" << endl;
        for (int i = 0; i < 5; i++)
        {
            cout << "请输入第" << i+1 << "个元素的值：" << endl;
            cin >> arr[i];
        }
        //2、实现逆置
        //2.1、记录起始下标位置
        //2.2、记录结束下标位置
        //2.3、起始下标与结束下标的元素互换
        //2.4、起始位置++ 结束位置--
        //2.5、循环执行2.1操作，直到起始位置下标>=结束位置下标
        int start = 0;//起始元素下标
        int end = sizeof(arr) / sizeof(arr[0]) - 1;//末尾元素下标
        int temp = 0;
        while (start < end)
        {
            //实现元素互换
            temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            //下标更新
            start++;
            end--;
        }
        //3、打印逆置后的数组
        cout << "数组元素逆置后：" << endl;
        for (int i = 0; i < 5; i++)
        {
            cout << arr[i] << endl;
        }
        system("pause");
        return 0;
    }

###5.2.3冒泡排序
作用：最常用的排序算法，对数组内元素进行排序
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值</li>
<li>重复以上的步骤，每次比较数-1，直到不需要比较</li>
</ol>

    #include<iostream>
    using namespace std;
    int main()
    {
        //利用冒泡排序实现升序序列
        int arr[] = {4,2,8,0,5,7,1,3,9};
        cout << "排序前：" << endl;
        for (int i = 0; i < 9; i++)
        {
            cout << arr[i] << " ";
        }
        cout << endl;
        //开始冒泡排序
        // 总共排序轮数为：元素个数-1
        int temp = 0;
        for (int i = 0; i < 9 - 1; i++)
        {
            //内层循环对比次数：元素个数-当前轮数-1
            for (int j = 0; j < 9-i-1; j++)
            {
                //如果第一个数字，比第二个数字大，交换两个数字
                if (arr[j] > arr[j + 1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
        //排序后结果
        cout << "排序后：" << endl;
        for (int i = 0; i < 9; i++)
        {
            cout << arr[i] << " ";
        }
        cout << endl;
        system("pause");
        return 0;
    }

##5.3二维数组
二维数组就是建立在一维数组上，多加一个维度。
###5.3.1二维数组定义方式
二维数组定义的四种方式：
<ol>
<li>数据类型 数组名[行数][列数];</li>
<li>数据类型 数组名[行数][列数] = {{数据1，数据2},{数据3，数据4}};</li>
<li>数据类型 数组名[行数][列数] = {数据1，数据2，数据3，数据4};</li>
<li>数据类型 数组名[][列数] = {数据1，数据2，数据3，数据4}；</li>
</ol>

    建议：上述4种定义方式，利用第二种更加直观，提高代码的可读性

    #include<iostream>
    using namespace std;
    int main()
    {
        //二维数组定义方式
        //1、数据类型 数组名[行数][列数]; 
        int arr[2][3];
        arr[0][0] = 1;
        arr[0][1] = 2;
        arr[0][2] = 3;
        arr[1][0] = 4;
        arr[1][1] = 5;
        arr[1][2] = 6;
        //外层循环打印行数，内存循环打印列数
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                cout << arr[i][j] << endl;
            }
        }
        //2、数据类型 数组名[行数][列数] = { {数据1，数据2},{数据3，数据4} }; 
        int arr2[2][3] = { {1,2,3} ,{4,5,6} };
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                cout << arr2[i][j] << " ";
            }
            cout << endl;
        }
        //3、数据类型 数组名[行数][列数] = { 数据1，数据2，数据3，数据4 }; 
        int arr3[2][3] = { 1,2,3,4,5,6 };
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                cout << arr3[i][j] << " ";
            }
            cout << endl;
        }
        //4、数据类型 数组名[][列数] = { 数据1，数据2，数据3，数据4 }；
        int arr4[][3] = { 1,2,3,4,5,6 };
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                cout << arr3[i][j] << " ";
            }
            cout << endl;
        }
        system("pause");
        return 0;
    }
总结：在定义二维数组时，如果初始化了数据，可以省略行数
###5.3.2二维数组数组名
<ol>
<li>查看二维数组所占内存地址</li>
<li>获取二维数组首地址</li>
</ol>

    #include<iostream>
    using namespace std;
    int main()
    {
        //二维数组数组名
        //1、可以查看占用内存空间大小
        int arr[2][3] = { {1,2,3},{4,5,6} };
        cout << "二维数组占用内存空间为" << sizeof(arr) << endl;
        cout << "二维数组第一行占用内存为 " << sizeof(arr[0]) << endl;
        cout << "二维数组第一个元素占用内存为 " << sizeof(arr[0][0]) << endl;
        cout << "二维数组的行数为：" << sizeof(arr) / sizeof(arr[0]) << endl;
        cout << "二维数组的列数为：" << sizeof(arr[0]) / sizeof(arr[0][0]) << endl;
        //2、可以查看二维数组的首地址
        cout << "二维数组的首地址为 " << arr << endl;
        cout <<"二维数组的首地址为 " <<(int)arr << endl;
        cout << "二维数组的第一行首地址为 " << (int)arr[0] << endl;
        cout << "二维数组的第二行首地址为 " << (int)arr[1] << endl;
        cout << "二维数组的第一个元素地址为 " << (int)&arr[0][0] << endl;
        cout << "二维数组的第二个元素地址为 " << (int)&arr[0][1] << endl;
        system("pause");
        return 0;
    }

###5.3.3二维数组应用案例
考试成绩统计：
案例描述：有三位同学（张三、李四、王五），在一次考试中

