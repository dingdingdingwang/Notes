
#序列

序列是一种数据存储方式，用来存储一系列的数据。在内存中，序列就是一块用来存放多个值的连续的内存空间。
列表：用于存储任意数目、任意类型的数据集合
列表是内置可变序列，是包含多个元素的有序连续的内存空间。列表定义的标准语法格式：
a = [10,20,30,40]
其中，10，20，30，40这些称为：列表a的元素。
列表中的元素可以各不相同，可以是任意类型。比如：
a=[10,20,'abc',True]
--------------------------------------------------------------------------
列表对象的常用方法汇总如下。
list.append(x)	        增加元素	将元素x增加到列表list尾部
list.extend(aList)	    增加元素	将列表alist所有元素加到列表list尾部
list.insert(index,x)	增加元素	在列表list指定位置index处插入元素x

list.remove(x)	        删除元素	在列表list中删除首次出现的指定元素x
list.pop([index])	    删除元素 删除并返回列表list指定为止index处的元素，默认是最后一个元素
list.clear()	        删除所有元素 删除列表多有元素，并不是删除列表对象

list.index(x)	        访问元素 返回第一个x的索引位置，若不存在x元素抛出异常
list.count(x)	        计数     返回指定元素x在列表list中出现的次数
len(list)	            列表长度 返回列表中包含元素的个数

list.reverse()	        翻转列表	 所有元素原地翻转
list.sort()	            排序    	 所有元素原地排序
list.copy()	            浅拷贝	 返回列表对象的浅拷贝
※Python的列表大小可变，根据需要随时增加或缩小。
--------------------------------------------------------------------------
列表的创建
基本语法[]创建
---------------------------------------------
>>> a = []	#创建一个空的列表对象
list()创建
>>> a = list()	#创建一个空的列表对象
>>> a = list(range(10))
>>> a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> a = list("gaoqi,sxt")
>>> a
['g', 'a', 'o', 'q', 'i', ',', 's', 'x', 't']
---------------------------------------------
range()创建整数列表
range()可以帮我们非常方便的创建整数列表，语法格式为：
range([start,]end[,step])
start参数：可选，表示起始数字。默认是0
end参数：必选，表示结尾数字
step参数：可选，表示步长，默认为1
Python3中range()返回的是一个range对象，而不是列表。我们需要通过list()方法将其转换成列表对象。
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> list(range(0,10,1))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> list(range(3,20,2))
[3, 5, 7, 9, 11, 13, 15, 17, 19]
>>> list(range(20,3,-1))
[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4]
>>> list(range(-10,-33,-1))
[-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32]
推导式生成列表
使用列表推导式可以非常方便的创建列表，在开发中经常使用。但是，由于涉及到for循环和if语句。
>>> a = [x*2 for x in range(5)]#循环创建多个元素
>>> a
[0, 2, 4, 6, 8]
>>> a = [x*2 for x in range(100) if x%9==0]#通过if过滤元素
>>> a
[0, 18, 36, 54, 72, 90, 108, 126, 144, 162, 180, 198]

#列表元素的增加
##append()方法
原地修改列表对象，是真正的列表尾部添加新的元素，速度很快，推荐使用。
>>> a = [20,40]
>>> a.append(80)
>>> a
[20, 40, 80]
##+运算符操作
并不是真正的尾部添加元素，而是创建新的列表对象；将源列表的元素和新列表的元素一次复制到新的列表对象中。
>>> a = [20,40,100,200]
>>> id(a)
1952420486848
>>> a = a+[50]
>>> a
[20, 40, 100, 200, 50]
>>> id(a)
1952420485440
##extend()方法
将目标列表的所有元素添加到本列表的尾部，属于原地操作，不创建新的列表对象。
>>> a = [20,40]
>>> id(a)
1952418212864
>>> a.extend([50,60])
>>> a
[20, 40, 50, 60]
>>> id(a)
1952418212864
##insert()：插入元素
使用insert()方法将指定的元素插入到列表对象的任意指定位置。涉及大量元素时，不建议使用。
>>> a= [10,20,30]
>>> a.insert(2,100)
>>> a
[10, 20, 100, 30]
##乘法扩展：字符串、元组、列表都适用
>>> a = ['sxt',100]
>>> b = a*3
>>> a
['sxt', 100]
>>> b
['sxt', 100, 'sxt', 100, 'sxt', 100]

#列表元素删除
##del()删除
删除列表指定位置的元素
>>> a = [10,20,30]
>>> del a[1]
>>> a
[10, 30]
##pop()方法
pop()删除并返回指定位置元素，如果未指定位置则默认操作列表最后一个元素。
>>> a = [10,20,30,40,50]
>>> a.pop()
50
>>> a
[10, 20, 30, 40]
##remove()方法
删除首次出现的指定元素，若不存在该元素抛出异常
>>> a = [10,20,30,40,50,20,30,20,30]
>>> a.remove(20)
>>> a
[10, 30, 40, 50, 20, 30, 20, 30]
>>> a.remove(100)
Traceback (most recent call last):
  File "<pyshell#39>", line 1, in <module>
    a.remove(100)
ValueError: list.remove(x): x not in list
#列表元素访问
##通过索引直接访问元素
索引的区间在[0,列表长度-1]这个范围。超过这个范围则会抛出异常。
>>> a = [10,20,30,40,50,20,30,20,30]
>>> a[2]
30
>>> a[10]
Traceback (most recent call last):
  File "<pyshell#12>", line 1, in <module>
    a[10]
IndexError: list index out of range
##index()获得指定元素在列表中首次出现的索引
index()可以获得指定元素首次出现的索引位置。语法是index(value,[start,[end]])。其中start和end指定了搜索范围。
-------------------------------------
>>> a = [10,20,30,40,50,20,30,20,30]
>>> a.index(20)
1
>>> a.index(20,3)
5
>>> a.index(30,5,7)
6
-------------------------------------
##count()获得指定元素在列表中出现的次数
返回指定元素在列表中出现的次数。
---------------------------------
a = [10,20,30,40,50,20,30,20,30]
>>> a.count(20)
3
---------------------------------
##len()返回列表长度
len()返回列表长度，即列表中包含元素的个数。
-------------------
>>> a = [10,20,30]
>>> len(a)
3
-------------------
##成员资格判断
判断列表中是否存在指定的元素，我们可以使用count()方法，返回0则表示不存在，返回1则表示存在。但是我们一般会使用更加简洁的in关键字来判断，直接返回True或False。
-------------------------------------
>>> a = [10,20,30,40,50,20,30,20,30]
>>> 20 in a
True
>>> 100 not in a
True
>>> 9 in a
False
--------------------------------------
slice()函数，[起始偏移量start:终止偏移量end[:步长step]]
注：当步长省略时顺便可以省略第二个冒号
典型操作（三个量为正数）：
[:]：提取整个列表
[start:]：从start索引开始到结尾
[:end]：从头开始直到end-1
[start:end]：从start到end-1
[start:end:step]：从start提取到end-1，步长是step
---------------------------
>>> a = [10,20,30,40,50,60]
>>> a[:]
[10, 20, 30, 40, 50, 60]
>>> a[1:3:1]
[20, 30]
>>> a[1::2]
[20, 40, 60]
>>> a[1:]
[20, 30, 40, 50, 60]
>>> a[:2]
[10, 20]
---------------------------
其他操作（三个量为负数）:
[-3:]：倒数3个
[-5:-3]：倒数第5个到倒数第3个（包头不包尾）
[::-1]：步长为负，从右到左反向提取
------------------------------
>>> a = [10,20,30,40,50,60,70]
>>> a[-3:]
[50, 60, 70]
>>> a[-5:-3]
[30, 40]
>>> a[::-1]
[70, 60, 50, 40, 30, 20, 10]
------------------------------
注意：切片操作时，起始偏移量和终止偏移量不在[0,len-1]这个范围，也不会报错。起始偏移量小于0则会被当作0，终止偏移量大于"len-1"，会被当成len-1。
-------------------------
>>> a[1:30]
[20, 30, 40, 50, 60, 70]
-------------------------
#列表的遍历
##for obj in listobj:
print(obj)
---------------------------
>>> a = [10,20,30,40,50,60]
>>> for x in a:
	print(x)

	
10
20
30
40
50
60
70
>>> a = [10,20,30,40,50,60]
>>> for x in a:
	print(x,end="#")

	
10#20#30#40#50#60#
---------------------------
#列表排序
修改原列表，不建新列表的排序
---------------------------------------
>>> a = [20,10,30,40]
>>> id(a)
1677110833408
>>> a.sort()	#默认是升序排列
>>> a
[10, 20, 30, 40]
>>> id(a)
1677110833408
>>> a.sort(reverse=True)	#降序排列
>>> a
[40, 30, 20, 10]
>>> a = [10,20,30,40]
>>> import random
>>> random.shuffle(a)	#打乱顺序
>>> a
[40, 20, 10, 30]
---------------------------------------
##建立新列表的的排序
我们也可以通过内置函数sorted()进行排序，这个方法返回新列表，不对原列表做修改。
---------------------------------------
>>> a = [20,10,30,40]
>>> id(a)
1677110823360
>>> a = sorted(a)	#默认升序
>>> a
[10, 20, 30, 40]
>>> id(a)
1677110822720
>>> c = sorted(a,reverse=True)	#降序
>>> c
[40, 30, 20, 10]
>>> id(c)
1677110823872
---------------------------------------
我们可以看出，生成的列表对象b和c都是完全新的列表对象。
##reversed()返回迭代器
内置函数reversed()也支持进行逆序排列，与列表对象reverse()方法不同的是，内置函数reversed()不对原列表做任何修改，只是返回一个逆序排列的迭代器对象。
---------------------------------------------------
>>> a = [20,10,30,40]
>>> c = reversed(a)
>>> c
<list_reverseiterator object at 0x000001867B9442B0>
>>> list(c)
[40, 30, 10, 20]
>>> list(c)	#迭代器只能用一次
[]
---------------------------------------------------
列表相关的其他内置函数汇总
max 和 min
用于返回列表中最大和最小值。
----------------------
>>> a = [10,20,30,40]
>>> max(a)
40
>>> min(a)
10
----------------------
sum
对数值型列表的所有元素进行求和操作，对非数值型列表运算则会报错。
-----------------------
>>> a = [3,10,20,15,9]
>>> sum(a)
57
----------------------
#多维列表
##二维列表
一维列表可以帮助我们存储一维、线性的数据。
二维列表可以帮助我们存储二维、表格的数据。
---------------------------
>>> a=[
	["高小一",18,30000,"北京"],
	["高小二",19,20000,"上海"],
	["高小五",20,10000,"深圳"],
]
>>> a[0][3]
'北京'
>>> print(a[1][0],a[1][1],a[1][2])
高小二 19 20000
---------------------------------
a = [
["高小一",18,30000,"北京"],
["高小二",19,20000,"上海"],
["高小五",20,10000,"深圳"],
]

for m in range(3):
    for n in range(4):
        print(a[m][n],end="\t")

        print()#打印完一行，换行
结果：
高小一	
18	
30000	
北京	
高小二	
19	
20000	
上海	
高小五	
20	
10000	
深圳	
---------------------------------