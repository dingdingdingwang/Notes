
#字典

字典是“键值对”的无序可变序列，字典中的每个元素都是一个“键值对”，包含：“键对象”和“值对象”。可以通过“键对象”实现快速获取、删除、更新对应的“值对象”。
列表中我们通过“下标数字”找到对应的对象。字典中通过“键对象”找到对应的“值对象”。“键”是任意的不可变数据，比如：整数、浮点数、字符串、元组。但是：列表、字典、集合这些可变对象，不能作为“键”。并且“键”不可重复。
“值”可以是任意的数据，并且可重复。
一个典型的的字典的定义式：
a = {'name':'wjw','age':18,'job':programmer}	#name是键,gaoqi是值
##字典的创建
1.我们可以通过{}、dict()来创建字典对象。
----------------------------------------------------
>>> a = {'name':'wjw','age':18,'job':'programmer'}
>>> b = dict(name='wjw',age=18,job='programmer')
>>> a = dict([("name","wjw"),("age",18)])
>>> c = {}	#空的字典对象
>>> d = dict()	#空的字典对象
>>> a
{'name': 'wjw', 'age': 18}
>>> b
{'name': 'wjw', 'age': 18, 'job': 'programmer'}
>>> type(a)
<class 'dict'>
>>> type(b)
<class 'dict'>
>>> type(c)
<class 'dict'>
>>> type(d)
<class 'dict'>
----------------------------------------------------
2.通过zip()创建字典对象
---------------------------------------------
>>> k = ['name','age','job']
>>> v = ['wjw',18,'techer']
>>> d = dict(zip(k,v))
>>> d
{'name': 'wjw', 'age': 18, 'job': 'techer'}
---------------------------------------------
3.通过fromkeys创建值为空的字典
-------------------------------------------
>>> a = dict.fromkeys(['name','age','job'])
>>> a
{'name': None, 'age': None, 'job': None}
-------------------------------------------
##字典元素的访问
为了测试各种访问方法，我们这里设定一个字典对象。
a = {'name':'wjw','age':18,'job':'programmer'}
1.通过 [键] 获得 “值” 。若键不存在，则抛出异常。
--------------------------------------------
>>> a['name']
'gaoqi'
>>> a['ddd']
Traceback (most recent call last):
  File "<pyshell#59>", line 1, in <module>
    a['ddd']
KeyError: 'ddd'
--------------------------------------------
2.通过get()方法获得 “值”。推荐使用。优点是：指定键不存在，返回None；也可以设定指定键不存在时默认返回的对象。推荐使用get()获取“值对象”。
----------------------------
>>> a.get('name')
'gaoqi'
>>> a.get('sex')
>>> a.get('sex','一个男人')
'一个男人'
----------------------------
3.列出所有的键值对
---------------------------------------------------------------------
>>> a.items()
dict_items([('name', 'wjw'), ('age', 18), ('job', 'programmer')])
---------------------------------------------------------------------
4.列出所有的键，列出所有的值
----------------------------------------
>>> a.keys()
dict_keys(['name', 'age', 'job'])
>>> a.values()
dict_values(['wjw', 18, 'programmer'])
----------------------------------------
5.len()键值对的个数
----------
>>> len(a)
3
----------
6.检测一个“键”是否在字典中
-------------------------------
>>> a = {'name':'wjw','age':18}
>>> 'name' in a
True
-------------------------------
##字典元素添加、修改、删除
1.给字典新增 “键值对” 。如果 “键” 已经存在，则覆盖旧的键值对；如果 “键” 不存在，则新增 “键值对”。
------------------------------------------------------------------------
>>> a = {'name':'wjw','age':18,'job':'programmer'}
>>> a['address']='西三旗1号院'
>>> a['age']=16
>>> a
{'name': 'wjw', 'age': 16, 'job': 'programmer', 'address': '西三旗1号院'}
------------------------------------------------------------------------
2.使用update()将新字典中所有键值对全部添加到旧字典对象上。如果key有重复，则直接覆盖。
----------------------------------------------------------------------
>>> a = {'name':'wjw','age':18,'job':'programmer'}
>>> b = {'name':'wjw','money':10000,'sex':'male'}
>>> a.update(b)
>>> a
{'name': 'wjw', 'age': 18, 'job': 'programmer', 'money': 10000, 'sex': 'male'}
----------------------------------------------------------------------
3.字典中元素的删除，可以使用del()方法；或者clear()删除所有键值对；pop()删除指定键值对，并返回对应的“值对象”。
---------------------------------------------------
>>> a = {'name':'wjw','age':18,'job':'programmer'}
>>> del(a['name'])
>>> a
{'age': 18, 'job': 'programmer'}
>>> b = a.pop('age')
>>> b
18
>>> a.clear()
>>> a
{}
---------------------------------------------------
4.popitem()：随即删除和返回该键值对。字典是“无序可变序列”，因此没有第一个元素、最后一个元素的概念；popitem弹出随机的项，因为字典并没有“最后的元素”或者其他有关顺序的概念。若想一个接一个的移除并处理项，这个方法就非常有效（因为不用首先获取键的列表）。
--------------------------------------------------
>>> a = {'name':'wjw','age':18,'job':'programmer'}
>>> a.popitem()
('job', 'programmer')
>>> a
{'name': 'wjw', 'age': 18}
>>> a.popitem()
('age', 18)
>>> a
{'name': 'wjw'}
--------------------------------------------------
##序列解包
序列解包可以用于元组、列表、字典。序列解包可以让我们方便的对多个变量赋值。
-----------------------------
>>> x,y,z=(20,30,10)
>>> x
20
>>> y
30
>>> z
10
>>> (a,b,c)=(9,8,10)
>>> a
9
>>> [a,b,c]=[10,20,30]
>>> a
10
>>> b
20
-----------------------------
序列解包用于字典时，默认是对 “键” 进行操作；如果需要对键值对操作，则需要使用items()；如果需要对 “值” 进行操作，则需要使用values()；
--------------------------------------------------
>>> s = {'name':'wjw','age':18,'job':'programmer'}
>>> name,age,job=sex	#默认对键进行操作
>>> name
'name'
>>> name,age,job=s.items()	#对键值对进行操作
>>> name
('name', 'wjw')
>>> name[0]
'name'
>>> name[1]
'wjw'
>>> name,age,job=s.values()	#对值进行操作
>>> name
'wjw'
---------------------------------------------------

表格数据使用字典和列表存储，并实现访问
----------------------------------------------------------------------------------------
r1 = {"name":"高小一","age":18,"salary":30000,"city":"北京"}
r2 = {"name":"高小二","age":19,"salary":20000,"city":"上海"}
r3 = {"name":"高小五","age":20,"salary":10000,"city":"南京"}

tb = [r1,r2,r3]

#获得第二行人的薪资
print(tb[1].get("salary"))

#打印所有人的薪资
for i in range(len(tb)):
    print(tb[i].get("salary"))

#打印表的所有数据
for i in range(len(tb)):
    print(tb[i].get("name"),tb[i].get("age"),tb[i].get("salary"),tb[i].get("city"))
结果：
20000
30000
20000
10000
高小一 18 30000 北京
高小二 19 20000 上海
高小五 20 10000 南京
---------------------------------------------------------------------------------------

字典核心底层原理（重要）
字典对象的核心是散列表。散列表是一个稀疏数组（总是有空白元素的数组），数组的每个单元叫做bucket。每个bucket有两部分：一个是键对象的引用，一个是值对象的引用。
由于，所有bucket结构和大小一致，我们可以通过偏移量来读取指定bucket。

##将一个键值对放进字典的底层过程
假设字典a对象创建后，数组长度为8：
要把"name" = "gaoqi"这个键值对放到字典对象a中，首先第一步需要计算键"name"的散列值。python中可以通过hash()函数来计算。
--------------------------------------------------------------------
>>> a["name"] = "gaoqi"
>>> bin(hash("name"))
'-0b10101000000111010010010101000101000011100100010000110010100010'
--------------------------------------------------------------------
由于数组长度为8，我们可以拿计算出的散列值的最右边3位数字作为偏移量，即"010"，十进制是2。我们查看偏移量2，对应的bucket是否为空。如果为空，则将键值对放进去。如果不为空，则依次取右边3位作为偏移量，即"100"，十进制是数字4，再查看偏移量为4的bucket是否为空。直到找到为空的bucket将键值对放进去。

##扩容
python会根据散列表的拥挤程度扩容。“扩容”指的是：创建更大的数组，将原有内容拷贝到新数组中。
接近2/3时，数组就会扩容。

##根据键查找“键值对”的底层过程
----------------------------
>>> a["name"] = "gaoqi"
>>> a.get("name")
'gaoqi'
----------------------------
当我们调用a,get("name")，就是根据键"name"查找"键值对"，从而找到值对象"gaoqi"。
第一步，计算"name"对象的散列值：
------------------------------------------------------------------
>>> bin(hash("name"))
'-0b10101000000111010010010101000101000011100100010000110010100010'
------------------------------------------------------------------
和存储的底层流程一样算法一致，也是依次取散列值的不同位置的数字。假设数组长度为8，我们可以拿计算出的散列值的最右边3位数作为偏移量，即"010"，十进制是数字2.我们查看偏移量2，对应的bucket是否为空。如果为空，则返回None。如果不为空，则将这个bucket的键对象计算对应散列值，和我们的散列值进行比较，如果相等。则将对应的"值对象"返回。如果不相等，则再依次取其他几位数字，重新计算偏移量。依次取完后，仍然没有找到。则返回None。
##总结
1.键必须可散列
	（1）数字、字符串、元组，都是可散列的。
	（2）自定义对象需要支持下面三点：
		①支持hash()函数
		②支持__eq__()方法检测相等性
		③若a == b为真，则hash(a) == hash(b)也为真。
2.字典在内存中开销巨大，典型的空间换时间。
3.键查询速度很快
4.往字典里添加新键可能导致扩容，导致散列表中键的次序变化。因此，不要在遍历字典的同时进行字典的修改。